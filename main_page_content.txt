Приложение демонстрирует основные возможрости MVC- фреймворка.

Класс Application - начальный класс приложения, осуществляет первичную загрузку параметров, соединения с БД, DI-контейнера.
Класс DI-контейнер - осуществляет рекурсивное создание классов на основе их зависимостей указанной в конструкторе.
Класс Router - служит для маршрутизации - нахождения и создания контроллера, который предназначен для обработки запроса.
Класс Request - обрабатывает входящий запрос, выделяя входные параметры
Класс Response - формирует ответ сервера
Контроллеры - содержат логику обработки запросов
Middleware - посредники, могут быть вызваны до выполнения контроллера с целью реализации какой-либо общай бизнес-логики, такой как фильтрация или аунтификация
Модели - служат для работы с базой данных
Миграции - оприделенные действия (как правило в базе данных), которые необходимо повторить на всех экземплярах системы
Виды - представлены шаблонами twig
Консольные команды - представлены библиотекой symfony/console
Для работы с БД используется doctrine/dbal
Юнит-тесты написаны с использованием PHPUnit

Приложение работает в docker окружение, оркестрация через docker-compose. Основная цель приложения - демонстрация навыков работы автора, а так же платформа для выполнения тестовых заданий.

Разделы главной страницы:

1. Описание приложения
2. Тестовые задания
?3. Использованные паттерны
4. Резюме, linkedin, HH, habr


Порождающие паттерны:
 - фабричный метод
 - прототип
 - абстрактная фабрика
 - строитель
 - одиночка
Структурные паттерны:
 - Адаптер
 - Мост
 - Компоновщик
 - Декоратор
 - Фасад
 - Легковес
 - Заместитель
Поведенческие паттерны:
 - Цепочка обязанностей
 - Команда
 - Итератор
 - Посредник
 - Снимок
 - Наблюдатель
 - Состояние
 - Стратегия
 - Шаблонный метод
 - Посетитель

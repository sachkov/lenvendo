{% extends 'base.html.twig' %}

{% block title %}PHP Framework Example{% endblock %}

{% block body %}

<h3>Приложение демонстрирует основные возможрости MVC- фреймворка.</h3>

<p>Класс <b>Application</b> - начальный класс приложения, осуществляет первичную загрузку параметров, соединения с БД, DI-контейнера.</p>
<p>Класс <b>Container</b> это DI-контейнер, который осуществляет рекурсивное создание классов на основе их зависимостей указанной в конструкторе.</p>
<p>Класс <b>Router</b> - служит для маршрутизации - нахождения и создания контроллера, который предназначен для обработки запроса.</p>
<p>Класс <b>Request</b> - обрабатывает входящий запрос, выделяя входные параметры.</p>
<p>Класс <b>Response</b> - формирует ответ сервера.</p>
<p>Контроллеры - содержат логику обработки запросов.</p>
<p><b>Middleware</b> - посредники, могут быть вызваны до выполнения контроллера с целью реализации какой-либо общай бизнес-логики, такой как фильтрация или аунтификация.</p>
<p>Модели - служат для работы с базой данных.</p>
<p>Миграции - оприделенные действия (как правило в базе данных), которые необходимо повторить на всех экземплярах системы.</p>
<p>Виды - представлены шаблонами <i>twig</i>.</p>
<p>Консольные команды - представлены библиотекой <i>symfony/console</i>.</p>
<p>Для работы с БД используется <i>doctrine/dbal</i>.</p>
<p>Юнит-тесты написаны с использованием <i>PHPUnit</i>.</p>
<br>
<p>Приложение работает в docker окружение, оркестрация через docker-compose. Основная цель приложения - демонстрация навыков работы автора, а так же платформа для выполнения тестовых заданий.</p>

<p>Тестовые задания:</p>
<ul>
    <li><a href="/slotegrator/">Вэб-приложение для розыгрыша призов</a></li>
</ul>
{% endblock %}